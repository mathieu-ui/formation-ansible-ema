---

- name: Install Chrony with package manager of hosts
  hosts: all
  gather_facts: true
  vars:
    chrony_service_debian_ubuntu: "chrony"
    chrony_service_redhat_suse: "chronyd"
    chrony_conf_path_debian_ubuntu: "/etc/chrony/chrony.conf"
    chrony_conf_path_redhat_suse: "/etc/chrony.conf"
  tasks:
    - name: Install chrony on Debian/Ubuntu
      ansible.builtin.package:
        name: chrony
        state: present
        update_cache: true
      when: ansible_pkg_mgr == 'apt'
    
    - name: Install chrony on RHEL based systems
      ansible.builtin.dnf:
        name: chrony
        state: present
        update_cache: true
      when: ansible_pkg_mgr == 'dnf'
    
    - name: Install chrony on SUSE based systems
      ansible.builtin.zypper:
        name: chrony
        state: present
        update_cache: true
      when: ansible_pkg_mgr == 'zypper'
    
    - name: Configure chrony on Debian/Ubuntu
      ansible.builtin.copy:
        content: |-
          server 0.fr.pool.ntp.org iburst
          server 1.fr.pool.ntp.org iburst
          server 2.fr.pool.ntp.org iburst
          server 3.fr.pool.ntp.org iburst
          driftfile /var/lib/chrony/drift
          makestep 1.0 3
          rtcsync
          logdir /var/log/chrony
        dest: "{{ chrony_conf_path_debian_ubuntu }}"
        mode: '0644'
      notify: restart chrony on Debian/Ubuntu
      when: ansible_os_family == 'Debian'
    
    - name: Configure chrony on RedHat/SUSE systems
      ansible.builtin.copy:
        content: |-
          server 0.fr.pool.ntp.org iburst
          server 1.fr.pool.ntp.org iburst
          server 2.fr.pool.ntp.org iburst
          server 3.fr.pool.ntp.org iburst
          driftfile /var/lib/chrony/drift
          makestep 1.0 3
          rtcsync
          logdir /var/log/chrony
        dest: "{{ chrony_conf_path_redhat_suse }}"
        mode: '0644'
      notify: restart chrony on RedHat/SUSE
      when: ansible_os_family == 'RedHat' or ansible_os_family == 'Suse'
      
  handlers:
    - name: restart chrony on Debian/Ubuntu
      ansible.builtin.systemd:
        name: "{{ chrony_service_debian_ubuntu }}"
        state: restarted
        enabled: yes
      when: ansible_os_family == 'Debian'
      
    - name: restart chrony on RedHat/SUSE
      ansible.builtin.systemd:
        name: "{{ chrony_service_redhat_suse }}"
        state: restarted
        enabled: yes
      when: ansible_os_family == 'RedHat' or ansible_os_family == 'Suse'
